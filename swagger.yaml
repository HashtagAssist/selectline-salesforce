openapi: 3.0.0
info:
  title: SelectLine ERP API
  description: API for interacting with SelectLine ERP data
  version: 1.0.0
  contact:
    email: support@example.com
servers:
  - url: /api
    description: Development server
tags:
  - name: Auth
    description: Authentication operations
  - name: Kunden
    description: Operations about customers
  - name: Artikel
    description: Operations about products
  - name: Belege
    description: Operations about documents
  - name: Aufträge
    description: Operations about orders
  - name: Cache
    description: Cache management
  - name: Transformation
    description: Data transformation operations
  - name: Webhooks
    description: Webhook handling operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "An error occurred"
    
    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              msg:
                type: string
              param:
                type: string
              location:
                type: string
    
    Kunde:
      type: object
      properties:
        id:
          type: string
          example: "K10001"
        nummer:
          type: string
          example: "10001"
        name:
          type: string
          example: "Musterfirma GmbH"
        ansprechpartner:
          type: string
          example: "Max Mustermann"
        strasse:
          type: string
          example: "Musterstraße 123"
        plz:
          type: string
          example: "12345"
        ort:
          type: string
          example: "Berlin"
        land:
          type: string
          example: "Deutschland"
        telefon:
          type: string
          example: "+49 123 456789"
        email:
          type: string
          example: "info@musterfirma.de"
        kundenseit:
          type: string
          format: date
          example: "2020-01-01"
        rabatt:
          type: number
          format: float
          example: 5.0
    
    KundenListe:
      type: object
      properties:
        total:
          type: integer
          example: 120
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        data:
          type: array
          items:
            $ref: '#/components/schemas/Kunde'
    
    Artikel:
      type: object
      properties:
        id:
          type: string
          example: "A2001"
        nummer:
          type: string
          example: "2001"
        bezeichnung:
          type: string
          example: "Premium Laptop"
        kurzbezeichnung:
          type: string
          example: "Laptop"
        beschreibung:
          type: string
          example: "Hochwertiges Laptop mit 16GB RAM und 512GB SSD"
        ean:
          type: string
          example: "1234567890123"
        einheit:
          type: string
          example: "Stück"
        preis:
          type: number
          format: float
          example: 1299.99
        waehrung:
          type: string
          example: "EUR"
        steuerklasse:
          type: string
          example: "Standard"
        lagerbestand:
          type: integer
          example: 25
        aktiv:
          type: boolean
          example: true
    
    ArtikelListe:
      type: object
      properties:
        total:
          type: integer
          example: 500
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        data:
          type: array
          items:
            $ref: '#/components/schemas/Artikel'
    
    Beleg:
      type: object
      properties:
        id:
          type: string
          example: "R2022-1001"
        nummer:
          type: string
          example: "2022-1001"
        typ:
          type: string
          example: "Rechnung"
          enum: ["Angebot", "Auftrag", "Lieferschein", "Rechnung", "Gutschrift"]
        datum:
          type: string
          format: date
          example: "2022-05-15"
        faellig:
          type: string
          format: date
          example: "2022-06-14"
        kundennummer:
          type: string
          example: "K10001"
        kundenname:
          type: string
          example: "Musterfirma GmbH"
        betrag:
          type: number
          format: float
          example: 1567.89
        waehrung:
          type: string
          example: "EUR"
        status:
          type: string
          example: "Bezahlt"
          enum: ["Entwurf", "Offen", "Teilweise bezahlt", "Bezahlt", "Storniert"]
        positionen:
          type: array
          items:
            type: object
            properties:
              artikelnummer:
                type: string
                example: "A2001"
              bezeichnung:
                type: string
                example: "Premium Laptop"
              menge:
                type: number
                format: float
                example: 1
              einzelpreis:
                type: number
                format: float
                example: 1299.99
              gesamtpreis:
                type: number
                format: float
                example: 1299.99
    
    BelegeListe:
      type: object
      properties:
        total:
          type: integer
          example: 250
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        data:
          type: array
          items:
            $ref: '#/components/schemas/Beleg'
    
    Auftrag:
      type: object
      properties:
        id:
          type: string
          example: "AB2022-501"
        nummer:
          type: string
          example: "2022-501"
        datum:
          type: string
          format: date
          example: "2022-05-10"
        lieferdatum:
          type: string
          format: date
          example: "2022-05-20"
        kundennummer:
          type: string
          example: "K10001"
        kundenname:
          type: string
          example: "Musterfirma GmbH"
        status:
          type: string
          example: "In Bearbeitung"
          enum: ["Neu", "In Bearbeitung", "Teilweise geliefert", "Geliefert", "Abgeschlossen", "Storniert"]
        betrag:
          type: number
          format: float
          example: 1567.89
        waehrung:
          type: string
          example: "EUR"
        positionen:
          type: array
          items:
            type: object
            properties:
              artikelnummer:
                type: string
                example: "A2001"
              bezeichnung:
                type: string
                example: "Premium Laptop"
              menge:
                type: number
                format: float
                example: 1
              einzelpreis:
                type: number
                format: float
                example: 1299.99
              gesamtpreis:
                type: number
                format: float
                example: 1299.99
              lieferstatus:
                type: string
                example: "Nicht geliefert"
                enum: ["Nicht geliefert", "Teilweise geliefert", "Geliefert"]
    
    AuftragListe:
      type: object
      properties:
        total:
          type: integer
          example: 150
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
        data:
          type: array
          items:
            $ref: '#/components/schemas/Auftrag'
    
    CacheRefreshResponse:
      type: object
      properties:
        message:
          type: string
          example: "Cache successfully refreshed"

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "admin@example.com"
        password:
          type: string
          example: "yourSecurePassword"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600
        type:
          type: string
          example: "Bearer"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TransformationRequest:
      type: object
      required:
        - sourceFormat
        - targetFormat
        - data
      properties:
        sourceFormat:
          type: string
          enum: ["selectline", "salesforce"]
          example: "selectline"
        targetFormat:
          type: string
          enum: ["selectline", "salesforce"]
          example: "salesforce"
        data:
          type: object
          description: The data to transform
          example: {
            "nummer": "K10001",
            "name": "Musterfirma GmbH"
          }

    TransformationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: The transformed data
          example: {
            "AccountNumber": "K10001",
            "Name": "Musterfirma GmbH"
          }

    WebhookRegistration:
      type: object
      required:
        - url
        - events
      properties:
        url:
          type: string
          example: "https://your-service.com/webhook"
        events:
          type: array
          items:
            type: string
            enum: ["customer.created", "customer.updated", "order.created", "order.updated"]
          example: ["customer.created", "order.created"]
        secret:
          type: string
          description: Optional secret for webhook signature validation
          example: "your-webhook-secret"

    WebhookDelivery:
      type: object
      properties:
        id:
          type: string
          example: "whd_123456789"
        event:
          type: string
          example: "customer.created"
        url:
          type: string
          example: "https://your-service.com/webhook"
        status:
          type: string
          enum: ["pending", "delivered", "failed"]
          example: "delivered"
        createdAt:
          type: string
          format: date-time
          example: "2023-08-15T14:30:00Z"
        deliveredAt:
          type: string
          format: date-time
          example: "2023-08-15T14:30:01Z"

    RegistrationRequest:
      type: object
      required:
        - username
        - email
        - password
        - passwordConfirm
      properties:
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123"
        passwordConfirm:
          type: string
          format: password
          example: "securePassword123"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: ["user", "admin"]
          default: "user"
          example: "user"
    
    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
    
    PasswordResetConfirmRequest:
      type: object
      required:
        - token
        - password
        - passwordConfirm
      properties:
        token:
          type: string
          example: "reset-token-12345"
        password:
          type: string
          format: password
          minLength: 8
          example: "newSecurePassword123"
        passwordConfirm:
          type: string
          format: password
          example: "newSecurePassword123"
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: "user-123456"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        role:
          type: string
          enum: ["user", "admin"]
          example: "user"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-15T08:30:00Z"
        lastLogin:
          type: string
          format: date-time
          example: "2023-08-20T13:45:30Z"
    
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
        - newPasswordConfirm
      properties:
        currentPassword:
          type: string
          format: password
          example: "currentSecurePassword"
        newPassword:
          type: string
          format: password
          minLength: 8
          example: "newSecurePassword123"
        newPasswordConfirm:
          type: string
          format: password
          example: "newSecurePassword123"

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Creates a new user account
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful. Please verify your email."
                  userId:
                    type: string
                    example: "user-123456"
        '400':
          description: Invalid data or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email/{token}:
    get:
      tags:
        - Auth
      summary: Verify email address
      description: Verifies a user's email address using the token sent via email
      security: []  # No authentication required
      parameters:
        - in: path
          name: token
          required: true
          description: Email verification token
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verification successful. You can now log in."
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login to get access token
      description: Authenticate user and receive JWT token
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Get a new access token using a refresh token
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/password-reset:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Sends a password reset link to the user's email
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset instructions sent to your email."
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/password-reset/{token}:
    post:
      tags:
        - Auth
      summary: Reset password with token
      description: Resets user password using the token sent via email
      security: []  # No authentication required
      parameters:
        - in: path
          name: token
          required: true
          description: Password reset token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password has been reset successfully. You can now log in with your new password."
        '400':
          description: Invalid token or password validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      tags:
        - Auth
      summary: Get user profile
      description: Retrieves the current user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      tags:
        - Auth
      summary: Update user profile
      description: Updates the current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Change password
      description: Changes the current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully."
        '400':
          description: Invalid current password or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      description: Invalidates the current user's refresh token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/users:
    get:
      tags:
        - Auth
        - User Management
      summary: Get all users
      description: Retrieves a list of all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "60d21b4667d0d8992e610c85"
                            username:
                              type: string
                              example: "johndoe"
                            email:
                              type: string
                              example: "john@example.com"
                            firstName:
                              type: string
                              example: "John"
                            lastName:
                              type: string
                              example: "Doe"
                            role:
                              type: string
                              example: "user"
                            isActive:
                              type: boolean
                              example: true
                            isEmailVerified:
                              type: boolean
                              example: true
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Auth
        - User Management
      summary: Create a new user
      description: Creates a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - passwordConfirm
              properties:
                username:
                  type: string
                  example: "newuser"
                email:
                  type: string
                  format: email
                  example: "new@example.com"
                password:
                  type: string
                  format: password
                  example: "Password123"
                passwordConfirm:
                  type: string
                  format: password
                  example: "Password123"
                firstName:
                  type: string
                  example: "New"
                lastName:
                  type: string
                  example: "User"
                role:
                  type: string
                  enum: [user, admin]
                  example: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Benutzer erfolgreich erstellt"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "60d21b4667d0d8992e610c85"
                          username:
                            type: string
                            example: "newuser"
                          email:
                            type: string
                            example: "new@example.com"
                          firstName:
                            type: string
                            example: "New"
                          lastName:
                            type: string
                            example: "User"
                          role:
                            type: string
                            example: "user"
        '400':
          description: Bad Request - Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/users/{userId}:
    get:
      tags:
        - Auth
        - User Management
      summary: Get user by ID
      description: Retrieves a specific user by ID (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "60d21b4667d0d8992e610c85"
                          username:
                            type: string
                            example: "johndoe"
                          email:
                            type: string
                            example: "john@example.com"
                          firstName:
                            type: string
                            example: "John"
                          lastName:
                            type: string
                            example: "Doe"
                          role:
                            type: string
                            example: "user"
                          isActive:
                            type: boolean
                            example: true
                          isEmailVerified:
                            type: boolean
                            example: true
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Auth
        - User Management
      summary: Update user
      description: Updates a specific user's information (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "updateduser"
                email:
                  type: string
                  format: email
                  example: "updated@example.com"
                firstName:
                  type: string
                  example: "Updated"
                lastName:
                  type: string
                  example: "User"
                role:
                  type: string
                  enum: [user, admin]
                  example: "user"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Benutzer erfolgreich aktualisiert"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "60d21b4667d0d8992e610c85"
                          username:
                            type: string
                            example: "updateduser"
                          email:
                            type: string
                            example: "updated@example.com"
                          firstName:
                            type: string
                            example: "Updated"
                          lastName:
                            type: string
                            example: "User"
                          role:
                            type: string
                            example: "user"
        '400':
          description: Bad Request - Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Auth
        - User Management
      summary: Delete user
      description: Deletes a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to delete
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Benutzer erfolgreich gelöscht"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/users/{userId}/status:
    patch:
      tags:
        - Auth
        - User Management
      summary: Change user status
      description: Activates or deactivates a specific user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to update status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - isActive
              properties:
                isActive:
                  type: boolean
                  example: false
                  description: Whether the user should be active or inactive
      responses:
        '200':
          description: User status changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Benutzer wurde deaktiviert"
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "60d21b4667d0d8992e610c85"
                          username:
                            type: string
                            example: "johndoe"
                          isActive:
                            type: boolean
                            example: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transform:
    post:
      tags:
        - Transformation
      summary: Transform data between formats
      description: Transform data between SelectLine and Salesforce formats
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationRequest'
      responses:
        '200':
          description: Data transformed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks:
    post:
      tags:
        - Webhooks
      summary: Register a new webhook
      description: Register a URL to receive webhook events
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRegistration'
      responses:
        '201':
          description: Webhook registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookRegistration'
        '400':
          description: Invalid webhook configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Webhooks
      summary: List registered webhooks
      description: Get a list of all registered webhooks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookRegistration'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/{id}:
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook
      description: Remove a registered webhook
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the webhook to delete
          schema:
            type: string
      responses:
        '204':
          description: Webhook deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /webhooks/deliveries:
    get:
      tags:
        - Webhooks
      summary: List webhook deliveries
      description: Get a list of webhook delivery attempts
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          description: Filter by delivery status
          schema:
            type: string
            enum: ["pending", "delivered", "failed"]
        - in: query
          name: event
          description: Filter by event type
          schema:
            type: string
        - in: query
          name: from
          description: Start date for filtering (ISO format)
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: End date for filtering (ISO format)
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of webhook deliveries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookDelivery'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /erp/kunden:
    get:
      tags:
        - Kunden
      summary: Get a list of customers
      description: Returns a paginated list of customers from the SelectLine ERP system with optional search parameters
      parameters:
        - in: query
          name: limit
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: offset
          description: Number of items to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: search
          description: Search term to filter customers by name, number, or other properties
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KundenListe'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/kunden/{id}:
    get:
      tags:
        - Kunden
      summary: Get a customer by ID
      description: Returns a single customer from the SelectLine ERP system
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the customer to fetch
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kunde'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/artikel:
    get:
      tags:
        - Artikel
      summary: Get a list of products
      description: Returns a paginated list of products from the SelectLine ERP system with optional search parameters
      parameters:
        - in: query
          name: limit
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: offset
          description: Number of items to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: search
          description: Search term to filter products by name, number, or other properties
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtikelListe'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/artikel/{id}:
    get:
      tags:
        - Artikel
      summary: Get a product by ID
      description: Returns a single product from the SelectLine ERP system
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the product to fetch
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artikel'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/belege:
    get:
      tags:
        - Belege
      summary: Get a list of documents
      description: Returns a paginated list of documents from the SelectLine ERP system with optional filters
      parameters:
        - in: query
          name: typ
          description: Type of document to filter by
          schema:
            type: string
            enum: ["Angebot", "Auftrag", "Lieferschein", "Rechnung", "Gutschrift"]
        - in: query
          name: von
          description: Start date for filtering (ISO format)
          schema:
            type: string
            format: date
        - in: query
          name: bis
          description: End date for filtering (ISO format)
          schema:
            type: string
            format: date
        - in: query
          name: limit
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: offset
          description: Number of items to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BelegeListe'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/belege/{id}:
    get:
      tags:
        - Belege
      summary: Get a document by ID
      description: Returns a single document from the SelectLine ERP system
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the document to fetch
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beleg'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/auftraege:
    get:
      tags:
        - Aufträge
      summary: Get a list of orders
      description: Returns a paginated list of orders from the SelectLine ERP system with optional filters
      parameters:
        - in: query
          name: status
          description: Order status to filter by
          schema:
            type: string
            enum: ["Neu", "In Bearbeitung", "Teilweise geliefert", "Geliefert", "Abgeschlossen", "Storniert"]
        - in: query
          name: von
          description: Start date for filtering (ISO format)
          schema:
            type: string
            format: date
        - in: query
          name: bis
          description: End date for filtering (ISO format)
          schema:
            type: string
            format: date
        - in: query
          name: limit
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: offset
          description: Number of items to skip for pagination
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuftragListe'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/auftraege/{id}:
    get:
      tags:
        - Aufträge
      summary: Get an order by ID
      description: Returns a single order from the SelectLine ERP system
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the order to fetch
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auftrag'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /erp/cache-refresh:
    post:
      tags:
        - Cache
      summary: Refresh the cache for ERP data
      description: Clears the cache for all ERP data to ensure fresh data on next requests (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cache successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheRefreshResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Only admins can refresh cache
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 